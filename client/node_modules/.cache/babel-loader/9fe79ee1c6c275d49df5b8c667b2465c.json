{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\amray\\\\cogapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\amray\\\\cogapp\\\\client\\\\src\\\\MySnackbarContent.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nconst styles1 = theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.dark\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n});\n\nfunction MySnackbarContent(props) {\n  const classes = props.classes,\n        className = props.className,\n        message = props.message,\n        onClose = props.onClose,\n        variant = props.variant,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  const Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: classNames(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: classNames(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n};\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nconst styles2 = theme => ({\n  margin: {\n    margin: theme.spacing.unit\n  }\n});","map":{"version":3,"sources":["C:\\Users\\amray\\cogapp\\client\\src\\MySnackbarContent.js"],"names":["React","PropTypes","classNames","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","green","amber","IconButton","Snackbar","SnackbarContent","WarningIcon","withStyles","variantIcon","success","warning","error","info","styles1","theme","backgroundColor","palette","dark","primary","icon","fontSize","iconVariant","opacity","marginRight","spacing","unit","message","display","alignItems","MySnackbarContent","props","classes","className","onClose","variant","other","Icon","close","propTypes","object","isRequired","string","node","func","oneOf","MySnackbarContentWrapper","styles2","margin"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n  const { classes, className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={classNames(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>,\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  message: PropTypes.node,\r\n  onClose: PropTypes.func,\r\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nconst styles2 = theme => ({\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}